<?php


/**
 * Skeleton subclass for performing query and update operations on the 'manuscripts' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 11/01/08 09:07:52
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */

/**
 *
 * @author я
 *
 */
class manuscriptPeer extends BasemanuscriptPeer {
	
	const CREATED         = 0;
	const SUBMITTED       = 1;
	const ACCEPTED_REVIEW = 2;
	const UNDER_REVIEW    = 3;
	const UNDER_REWRITE   = 4;
	const REVIEWER_REJECT = 5;
	const ACCEPTED_PUBL   = 6;
	const REJECT          = 7;
	const PUBLISHED       = 8;
	const PENDING         = 9;
	const AFTER_REVIEW    = 10;
	const REVIEWER_REFUSED= 11;
	const REVIEW_FINAL    = 12;
	
	static public function statusString ($v)
	{
		switch ($v) {
			case self::CREATED:          $string = 'New'; break;
            case self::SUBMITTED:        $string = 'Submitted'; break;
            case self::ACCEPTED_REVIEW:  $string = 'Accepted for review'; break;
            case self::UNDER_REVIEW:     $string = 'Under review'; break;
            case self::UNDER_REWRITE:    $string = 'Under revision by authors'; break;
            case self::REVIEWER_REJECT:  $string = 'Reviewer rejected by authors'; break;
            case self::ACCEPTED_PUBL:    $string = 'Accepted for publication'; break;
            case self::PENDING:          $string = 'Pending'; break;
            case self::PUBLISHED:        $string = 'Published'; break;
            case self::REJECT:           $string = 'Rejected'; break;
            case self::AFTER_REVIEW:     $string = 'Reviewed'; break;
            case self::REVIEWER_REFUSED: $string = 'Reviewer refused to review the manuscript'; break;
            case self::REVIEW_FINAL:     $string = 'Under review after revision'; break;
		}
		return $string;
	}

	static public function doSelectOrderByForeignFields (Criteria $c, $con = null)
	{
	  $c = clone $c;
	  $order_columns = $c->getOrderByColumns();
	  $orders = array ('order_corresp', 'order_submit', 'order_authors', 'order_reviewer', 'order_action');
	  foreach ($order_columns as $order_column)
	  {
	  	foreach ($orders as $order) if (strstr($order_column, $order)) $$order=true;
	  }
	  if (isset($order_corresp))
	  {
	       $c->addAlias('order_xref', userManuscriptRefPeer::TABLE_NAME);
	       $xref_user_id = 'order_xref.'.strtoupper(userManuscriptRefPeer::translateFieldName(userManuscriptRefPeer::USER_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
	       $xref_man_id = 'order_xref.'.strtoupper(userManuscriptRefPeer::translateFieldName(userManuscriptRefPeer::MANUSCRIPT_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
	       $xref_is_corresponding = 'order_xref.'.strtoupper(userManuscriptRefPeer::translateFieldName(userManuscriptRefPeer::IS_CORRESPONDING_AUTHOR, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
	       $c->addAlias('order_corresp', sfGuardUserProfilePeer::TABLE_NAME);
	       $corresp_user_id = 'order_corresp.'.strtoupper(sfGuardUserProfilePeer::translateFieldName(sfGuardUserProfilePeer::USER_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
	       $c->addJoin(self::ID, $xref_man_id);
	       $c->addJoin($xref_user_id, $corresp_user_id);
	       $c->add($xref_is_corresponding, true);
	  }
	  
      if (isset($order_submit))
	  {
	       $c->addAlias('order_submit', actionPeer::TABLE_NAME);
           $submit_man_id = 'order_submit.'.strtoupper(actionPeer::translateFieldName(actionPeer::MANUSCRIPT_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $submit_before = 'order_submit.'.strtoupper(actionPeer::translateFieldName(actionPeer::STATUS_BEFORE, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $submit_after = 'order_submit.'.strtoupper(actionPeer::translateFieldName(actionPeer::STATUS_AFTER, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $c->addJoin(self::ID, $submit_man_id, Criteria::LEFT_JOIN);
	       $c->add($submit_before, manuscriptPeer::CREATED);
	       $c->add($submit_after, manuscriptPeer::SUBMITTED);
	  }
	  
      if (isset($order_authors))
	  {
           $c->addAlias('order_xref_a', userManuscriptRefPeer::TABLE_NAME);
           $xref_user_id = 'order_xref_a.'.strtoupper(userManuscriptRefPeer::translateFieldName(userManuscriptRefPeer::USER_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $xref_man_id = 'order_xref_a.'.strtoupper(userManuscriptRefPeer::translateFieldName(userManuscriptRefPeer::MANUSCRIPT_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $xref_ord_number = 'order_xref_a.'.strtoupper(userManuscriptRefPeer::translateFieldName(userManuscriptRefPeer::AUTHOR_ORDER, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $c->addAlias('order_authors', sfGuardUserProfilePeer::TABLE_NAME);
           $first_user_id = 'order_authors.'.strtoupper(sfGuardUserProfilePeer::translateFieldName(sfGuardUserProfilePeer::USER_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $c->addJoin(self::ID, $xref_man_id);
           $c->addJoin($xref_user_id, $first_user_id);
           $c->add($xref_ord_number, 0);
      }
	  if (isset($order_reviewer))
      {
           $c->addAlias('order_reviews', reviewPeer::TABLE_NAME);
           $review_user_id = 'order_reviews.'.strtoupper(reviewPeer::translateFieldName(reviewPeer::USER_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $review_man_id = 'order_reviews.'.strtoupper(reviewPeer::translateFieldName(reviewPeer::MANUSCRIPT_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $review_submitted = 'order_reviews.'.strtoupper(reviewPeer::translateFieldName(reviewPeer::SUBMITTED, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $c->addAlias('order_reviewer', sfGuardUserProfilePeer::TABLE_NAME);
           $reviewer_id = 'order_reviewer.'.strtoupper(sfGuardUserProfilePeer::translateFieldName(sfGuardUserProfilePeer::USER_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $c->addJoin(self::ID, $review_man_id, Criteria::LEFT_JOIN);
           $c->addJoin($review_user_id, $reviewer_id, Criteria::LEFT_JOIN);
           $c->addDescendingOrderByColumn($review_submitted);
           $c->setDistinct();
      }
	  if (isset($order_action))
      {
           $c->addAlias('order_action', actionPeer::TABLE_NAME);
           $action_man_id = 'order_action.'.strtoupper(actionPeer::translateFieldName(actionPeer::MANUSCRIPT_ID, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $action_datetime = 'order_action.'.strtoupper(actionPeer::translateFieldName(actionPeer::DATETIME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME));
           $c->addJoin(self::ID, $action_man_id);
           $c->addGroupByColumn(self::ID);
          
      }
	  return self::doSelectJoincity($c, $con);
	}
	
	/**
	 * @return array ('total'=>, 'published'=>, 'rejected'=>)
	 */
	static public function getStatsForTimespan ($from, $to, Criteria $c = null)
	{
		if ($c instanceof Criteria) $c = clone($c);
		else $c = new Criteria();
		$totals = array();
		$c->add(actionPeer::STATUS_BEFORE, manuscriptPeer::CREATED);
        $c->add(actionPeer::STATUS_AFTER, manuscriptPeer::SUBMITTED);
	    if (!is_null($from))
        {
            $c->add(actionPeer::DATETIME, $from, Criteria::GREATER_EQUAL );
        }
        if (!is_null($to))
        {
            $c->addAnd(actionPeer::DATETIME, $to, Criteria::LESS_EQUAL );
        }
        $c->addJoin(manuscriptPeer::ID, actionPeer::MANUSCRIPT_ID, Criteria::INNER_JOIN);
        $totals['total'] = manuscriptPeer::doCount($c);
        $c1 = clone($c);
        $c1->add(manuscriptPeer::STATUS, array(manuscriptPeer::PUBLISHED, manuscriptPeer::PENDING), Criteria::IN);
        $totals['published'] = manuscriptPeer::doCount($c1);
        $c1 = clone($c);
        $c1->add(manuscriptPeer::STATUS, manuscriptPeer::REJECT);
        $totals['rejected'] = manuscriptPeer::doCount($c1);
        return $totals;
	}
	
} // manuscriptPeer
